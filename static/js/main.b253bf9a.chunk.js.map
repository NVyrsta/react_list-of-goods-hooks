{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","Error","reverse","getReorderedGoods","isListSorted","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAjCR,SACEC,EACAN,EACAG,GAEA,IAAME,EAAY,YAAOC,GAsBzB,OApBAD,EAAaE,MAAK,SAACC,EAAGC,GACpB,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKb,EAASgB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,KAAKjB,EAASM,KACZ,OAAO,EAET,QACE,MAAM,IAAIY,MAAM,oCAIlBd,GACFK,EAAaU,UAGRV,EAMcW,CAAkBnB,EAAiBG,EAAYG,GAO9Dc,EAAed,IAAaP,EAASM,MAAQF,EAEnD,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMhB,EAAYR,EAASc,WACpCQ,UAAWG,IAAW,iBAAkB,CACtC,WAAYlB,IAAaP,EAASc,WAJtC,iCAUA,wBACES,KAAK,SACLC,QAAS,kBAAMhB,EAAYR,EAASgB,SACpCM,UAAWG,IAAW,oBAAqB,CACzC,WAAYlB,IAAaP,EAASgB,SAJtC,4BAUA,wBACEO,KAAK,SACLC,QAAS,kBAAMnB,GAAeD,IAC9BkB,UAAWG,IAAW,oBAAqB,CACzC,YAAarB,IAJjB,qBAUCiB,GACC,wBACEE,KAAK,SACLC,QA3CI,WACZnB,GAAc,GACdG,EAAYR,EAASM,OA0CbgB,UAAU,4BAHZ,sBAUJ,6BACGb,EAAaiB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b253bf9a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  isReversed: boolean,\n  sortType: SortType,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      case SortType.NONE:\n        return 0;\n\n      default:\n        throw new Error('Incorrect sorting parameters');\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const visibleGoods = getReorderedGoods(goodsFromServer, isReversed, sortType);\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const isListSorted = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.ALPHABET)}\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.LENGTH)}\n          className={classNames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(!isReversed)}\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {isListSorted && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}